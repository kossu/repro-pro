rm(list=ls())
getwd()
dir()
read.csv("hw1_data.csv")
data <- read.csv("hw1_data.csv")
head(data)
june <- data[,5==5]
june
june <- data[,"5"==5]
june <- data[5==5,]
head(june)
tail(june)
june <- data[,5]
tail(june)
june <- data[data$Month==6]
june <- data[data$Month==6,]
june
rm(list=ls())
library(datasets)
data("iris")
sapply(split(iris, iris$Species), mean)
sapply(split(iris, iris$Species), mean, na.rm = TRUE)
split(iris, iris$Species)
spe <- split(iris, iris$Species)
summary(spe)
sapply(spe[3], mean)
sapply(spe, mean)
split(iris, iris$Sepal.Length)
spe <- split(iris, iris$Species)
spe[3]
sapply(spe[3], mean)
lapply(spe[3], mean)
tapply(spe[3], 2, mean)
tapply(iris, iris$Species, mean)
spe <- split(iris, iris$Species)
summary(spe)
sp <- split(spe, spe$virginica)
q
exit
sp <- spe[3]
sp
sapply(sp, mean)
sapply(sp[,3], mean)
head(sp)
colMeans(sp)
spe < split(iris, iris$Species)
spe <- split(iris, iris$Species)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4],2,mean)
data("mtcars")
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?with
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
d <- tapply(mtcars$hp, mtcars$cyl, mean)
d[3]-d[1]
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
rm(list=ls())
x <- matrix(1:20,5)
x
solve(x)
x <- matrix(1:25,5)
solve(x)
x <- matrix(5:30,5)
x <- matrix(5:29,5)
solve(x)
x <- matrix(runif(9),3)
solve(x)
source('~/Google Drive/Data Science/git/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
# set value of matrix
set <- function(y) {
x <<- y
m <<- NULL
}
#get value of matrix
get <- function() x
setinv <- function(solve) m <<- mean
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
# if m is not empty, it's used
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(x)
cacheSolve(matrix(3,4,2,1))
library(xlsx)
library(rJava)
install.packages("xlsx")
library(rJava)
install.packages("rJava")
library(xlsx)
install.packages("xlsx")
remove.packages(rJava)
remove.packages("rJava")
remove.packages("xlsx")
rm=(list=ls())
rm(list=ls())
setwd("~/Google Drive/Data Science/05 -Reproducible research")
data <- read.csv("_e143dff6e844c7af8da2a4e71d7c054d_payments.csv")
head(data)
str(data)
with(data, plot(Average.Covered.Charges, Average.Total.Payments))
?subset
with(subset(data, Proveder.State == "NY"), plot(Average.Covered.Charges, Average.Total.Payments))
with(subset(data, Provider.State == "NY"), plot(Average.Covered.Charges, Average.Total.Payments))
with(subset(data, Provider.State == "NY"), plot(log(Average.Covered.Charges), log(Average.Total.Payments))
)
?lm
rm(list=ls())
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
setwd("~/Google Drive/Data Science/04 - Exploratory Data Analysis")
## Convert 'Month' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layou
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))  ## Plot with 2 panels
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
?qplot
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
rm(ls=ls())
rm(list=ls())
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?") #read datadata$Date <- as.Date(strptime(data$Date, "%d/%m/%Y")) # convert dates & time
d <- data$Date
t <- data$Time
dt <- paste(d,t)
data$Date <- strptime(dt, "%d/%m/%Y %H:%M:%S")
rm(list = c("d", "t", "dt")) # cleanup
data <- data[data$Date >= "2007-02-01 00:00:00" & data$Date <= "2007-02-02 23:59:00",] #subset data (2007-02-01 and 2007-02-02)
na <- is.na(data$Date) # get na's
data <- data[!na,] # drop na's
rm(na) # cleanup
plot(data$Date,data$Global_active_power, type="l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data$Date,data$Sub_metering_1, col = "black", type="l", pch = ".", xlab = "", ylab = "Energy sub metering")
#lines(data$Date,data$Sub_metering_1, col = "black")
lines(data$Date,data$Sub_metering_2, col = "red")
lines(data$Date,data$Sub_metering_3, col = "blue")
legend("topright", lty=1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
par(mfcol = c(2, 2), mar=c(4, 4, 2, 1))
# first plot - Global active power
plot(data$Date,data$Global_active_power, type="l", xlab = "", ylab = "Global Active Power (kilowatts)")
#lines(data$Date,data$Global_active_power)
# second plot - Energy sub metering
plot(data$Date,data$Sub_metering_1, col = "black", type="n", pch = ".", xlab = "", ylab = "Energy sub metering")
#lines(data$Date,data$Sub_metering_1, col = "black")
lines(data$Date,data$Sub_metering_2, col = "red")
lines(data$Date,data$Sub_metering_3, col = "blue")
legend("topright", lty=1, bty = "n", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# third plot - voltage
plot(data$Date,data$Voltage, type="l", xlab = "datetime", ylab = "Voltage")
#lines(data$Date,data$Voltage)
# fourth plot - global reactive
plot(data$Date,data$Global_reactive_power, type="l", xlab = "datetime", ylab = "Global_reactive_power")
#lines(data$Date,data$Global_reactive_power)
rm(list=ls())
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = "8", main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedi("plot1.R")
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(),10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
colorRampPalette(c("red", "blue"))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow")
)
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
p2(2)
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x,y,pch = 19, col=rgb(0,.5,.5))
plot(x,y,pch = 19, col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom(c("point", "smooth")))
qplot(displ, hwy, data = mpg, color = drv, geom= c("point", "smooth")))
qplot(displ, hwy, data = mpg, color = drv, geom= c("point", "smooth"))
qplot(hwy, data = mpg, col = drv)
qplot(y=hwy, data = mpg, col = drv)
qplot(y=hwy, data = mpg, color = drv
)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color="manufacturer")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets=.~drv)
qplot(hwy, data = mpg, facets=drv~.)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth", facets = .~drv))
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = .~drv))
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summry(g)
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method=lm)
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, aplha=1/2)
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, aplha=1/2,aes(color=drv))
g+geom_point(size=4, alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swilr Rules!")+labs(x="Displacement",y=Hwy Mileage)
g+geom_point(aes(color=drv))+labs(title(Swilr Rules!)+labs(x="Displacement",y=Hwy Mileage)
g+geom_point(aes(color=drv))+labs(title(Swilr Rules!)+labs(x(Displacement),y(Hwy Mileage))
g
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point((aes(color=drv)),size=2,aplha=1/1)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point((aes(color=drv)),size=2,alpha=1/1)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point((aes(color=drv)),size=2,alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv),theme_bw(base_family="Times"))
g+geom_point(aes(color=drv)
)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx,myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line(ylim)-3,3
g+geom_line(ylim(-3,3))
g+geom_line
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(-3,3))
g+geom_line()+coord_cartesian(ylim(c(-3,3))
)
g+geom_line()+coord_cartesian(ylim(c(-3,3)))
g+geom_line()
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g < ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g < ggplot(mpg, aes(x=displ)
)
g < ggplot(mpg)
g < ggplot(mpg, hwy)
g <- ggplot(testdat, aes(x=myx, y=myy))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black"")
)
()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black"")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement", y="Highway mileage", title="Swirl Rules!")
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = "cut")
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom(density))
qplot(price, data = diamonds, geom=density)
qplot(price, data = diamonds, geom="density")
qplot(price, data = diamonds, geom="density", color=cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method="lm"))
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method="lm")
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method="lm")+facet_grid(.~cut)
qplot(carat, price, data = diamonds, color = cut, facets=.~cut)+ geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(cut(diamonds$carat), seq(0,1,4), na.rm=TRUE)
cutpoints <- quantile(cut(diamonds$carat))
cutpoints <- quantile(diamonds$carat, seq(0,1,4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha = 1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha = 1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
rm(list=ls())
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
library(datasets)
data(airquality)
?transform
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
rm(list=ls())
install.packages("knitr", "markdown")
n
install.packages("knitr")
install.packages("markdown")
fit <- lm(Ozone ~ Wind+Solar.R+Temp, datat=airquality)
names(airquality)
?lm
?las
setwd("~/Google Drive/Data Science/git/repro/RepData_PeerAssessment1")
unzip("zipfile"activity.zip")
unzip("activity.zip")
data <- read.csv("activity.csv")
activity.ziphead(data)
head(data)
str(data)
head(data,50)
summary(data)
table(data$steps, data$date)
summary(data)
with(data, table(steps, date))
library(dplyr)
?group_by
group_by(data, date)
summarize(steps)
group_by(data, date, steps)
summarize(steps)
group_by(data, date)
summary(data)
288*5
1440/60
17568/1440
?summarize
summarize(ms = mean(steps))
summarize(ms = mean(data$steps))
group_by(data, data$date)
summarize(ms = mean(data$steps))
summarize(data, ms = mean(data$steps))
group_by(data, date)
summarize(data, ms = mean(steps))
summarize(data, ms = mean(steps, na.rm = TRUE))
head(data)
str(data)
class(data$date)
?xtabs
xtabs(steps ~ date, data = data)
steps <- xtabs(steps ~ date, data = data)
steps
head(steps)
dim(steps)
plot(steps, lty = "l")
plot(steps)
with(data, plot(steps, type="l", xlab = "Date", ylab = "Daily steps")
)
plot(steps, type="l", xlab = "Date", ylab = "Daily steps")
hist(steps, type="l", xlab = "Date", ylab = "# of steps", main = "Daily steps")
hist(steps, main = "Daily steps")
?hist
hist(steps, breaks = 10 , main = "Daily steps")
hist(steps, breaks = 15 , main = "Daily steps")
hist(steps, breaks = 15, main = "Daily steps")
hist(steps, breaks = 7, main = "Daily steps")
hist(steps, breaks = 5, main = "Daily steps")
hist(steps, main = "Daily steps")
dev.off()
hist(steps, main = "Daily steps")
hist(steps, main = "Total daily steps")
stepsm <- <- xtabs(mean(steps) ~ date, data = data)
stepsm <- xtabs(mean(steps) ~ date, data = data)
library(dplyr)
group_by(data, date)
str(data)
?dplyr
summarize(date, steps)
group_by(data, date)
summarize(date, steps)
group_by(data, date)
summarize(data, ms = mean(steps), date)
summarize(data, ms = mean(steps), unique(date))
daily <- group_by(data, date)
summarize(daily, ms = mean(steps))
summarize(daily, steps)
summarize(daily, md = median(steps))
summarize(daily, ms = mean(steps, na.rm = TRUE))
summarize(daily, md = median(steps, na.rm=TRUE))
msteps <- summarize(daily, ms = mean(steps, na.rm = TRUE))
print(msteps)
summarize(daily, md = median(steps, na.rm=TRUE))
plot(msteps, type = "l")
plot(msteps, type = "line")
head(msteps)
plot(msteps$ms, msteps$date, type = "l")
plot(msteps$date, msteps$ms, type = "l")
msteps
?plot
plot(msteps$date, msteps$ms, type = "l")
lines(msteps$date, msteps$ms)
plot(msteps$date, msteps$ms, type="l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(msteps$date, msteps$ms, type = "n")
dev.off()
plot(msteps$date, msteps$ms, type = "n")
plot(msteps$date, msteps$ms, type = "n", pch = ".")
dev.off()
plot(msteps$date, msteps$ms, type = "n", pch = ".")
head(msteps, 100)
class(msteps[1,1])
class(msteps[2,1])
class(msteps[[2,1])
class(msteps[[2,1]])
class(msteps[[1,1]])
class(msteps[[1,2]])
lines(msteps$date, msteps$ms, pch = "."
plot(msteps$date, msteps$ms, type="l", xlab = "", ylab = "Global Active Power (kilowatts)")
lines(msteps$date, msteps$ms, pch = ".")
plot(msteps$date, msteps$ms, type = "n", pch = "5")
lines(msteps$date, msteps$ms, pch = ".")
